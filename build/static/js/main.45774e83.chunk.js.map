{"version":3,"sources":["components/bomb.png","components/game-start-button.js","components/game-cell.js","components/game-area.js","components/game-area-layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameStartButton","click","randomArea","resetArea","useState","show","setShow","className","onClick","GameCell","memo","cellBomb","gameOver","stopGame","open","setOpen","useEffect","src","BombIcon","alt","GameArea","area","map","cell","index","key","GameAreaLayout","props","setReset","item","App","state","setState","i","push","j","Math","floor","random","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45774e83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.1150964c.png\";","import React, { useState } from \"react\";\r\n\r\nconst GameStartButton = ({ click, randomArea, resetArea }) => {\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const showAreaHideBtn = () => {\r\n        click();\r\n        setShow(true);\r\n    }\r\n\r\n    const resetGame = () => {\r\n        randomArea();\r\n        resetArea();\r\n    }\r\n\r\n    return (\r\n        <div className=\"buttons-container\">\r\n            {\r\n                show ? <button onClick={resetGame} className=\"game-button\">Reset game</button> : <button onClick={showAreaHideBtn} className=\"game-button\">Start game</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameStartButton;","import React, { useState, memo, useEffect } from 'react';\r\nimport BombIcon from './bomb.png';\r\n\r\nconst GameCell = memo(({ cellBomb, gameOver, stopGame }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const openCell = () => {\r\n        setOpen(true);\r\n        if (gameOver) {\r\n            return;\r\n        }\r\n        if (cellBomb) {\r\n            stopGame();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setOpen(false);\r\n    }, [gameOver]);\r\n\r\n    return (\r\n        <td onClick={openCell} className={open ? \"game-area-cell active\" : \"game-area-cell\"}>\r\n            {(gameOver && cellBomb) && <img src={BombIcon} alt=\"bomb\" />}\r\n        </td>\r\n    )\r\n})\r\n\r\nexport default GameCell;","import React from 'react';\r\nimport GameCell from './game-cell';\r\n\r\nconst GameArea = ({ stopGame, gameOver, area }) => {\r\n    return (\r\n        <tr className=\"game-area-row\">\r\n            {area.map((cell, index) => {\r\n                return (\r\n                    <GameCell\r\n                        key={index}\r\n                        cellBomb={cell === 1}\r\n                        stopGame={stopGame}\r\n                        gameOver={gameOver}\r\n                    />\r\n                )\r\n            })}\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default GameArea;","import React, { useState } from \"react\";\r\nimport GameStartButton from './game-start-button';\r\nimport GameArea from './game-area';\r\n\r\nconst GameAreaLayout = props => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [reset, setReset] = useState(false);\r\n\r\n    const showArea = () => {\r\n        setShow(true);\r\n    }\r\n\r\n    const resetArea = () => {\r\n        setReset(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Saper Homework 5-JS</h1>\r\n            <GameStartButton click={showArea} randomArea={props.randomArea} resetArea={resetArea} />\r\n            {\r\n                show && <table className=\"game-area\">\r\n                    <tbody>\r\n                        {props.area.map((item, index) => {\r\n                            return (\r\n                                <GameArea\r\n                                    key={index}\r\n                                    area={item}\r\n                                    gameOver={props.gameOver}\r\n                                    stopGame={props.stopGame}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameAreaLayout;","import React, { Component } from 'react';\nimport GameAreaLayout from './components/game-area-layout';\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    area: [\n      [0, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 1, 0, 0, 0, 1, 1, 1, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],\n    ],\n    gameOver: false\n  }\n\n  stopGame = () => {\n    this.setState({ gameOver: true })\n  }\n\n  randomArea = () => {\n    const area = [];\n    for (let i = 0; i < 10; i++) {\n      area.push([]);\n      for (let j = 0; j < 10; j++) {\n        area[i].push(Math.floor((Math.random() * 2)));\n      }\n    }\n    this.setState({ area, gameOver: false });\n  }\n\n  render() {\n    const { area, gameOver } = this.state;\n    return (\n      <div className=\"page-container\">\n        <GameAreaLayout\n          area={area}\n          gameOver={gameOver}\n          stopGame={this.stopGame}\n          randomArea={this.randomArea}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}